@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@using HOSTEE.Models;
@using Microsoft.AspNetCore.WebUtilities
@page "/"
@inject AuthenticationStateProvider authSP
@inject NavigationManager NavigationManager



<PageTitle>HOST</PageTitle>


<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h1>Welcome, @usersName</h1>
            <p>Your ID: @usersId</p>
        </Authorized>
        <NotAuthorized>
            <p>Please sign in</p>
            <button @onclick=SignInRedirect>Sign In</button>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<!--
@if (authenticated)
{
<h3>@t</h3>
<p>Authenticated: @authenticated</p>
}
else
{
<h3>Authenticated: @authenticated</h3>
<p>Please sign in</p>
<SignIn />
}
-->


@code{
    private bool authenticated = false;
    private string t = "Welcome to H.O.S.T.E.E";

    private string usersName = "noname";
    private string usersId = "no id";

    private bool test = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("forceRefresh", out var _))
        {
            NavigationManager.NavigateTo("/", forceLoad: false);
        }

        var authState = await authSP.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity?.IsAuthenticated == true)
        {
            Console.WriteLine("Index: User authenticated!");
            usersName = user.Identity?.Name;
            usersId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        else 
        {
            Console.WriteLine("Index: User is not Authenticated");
        }
        //authenticated = user.Identity.IsAuthenticated;

        //Console.WriteLine($"From Index/OnInitialized: {authenticated}, out user is {user.Identity.Name}");
        //t = authenticated ? $"Welcome to H.O.S.T.E.E, {user.FindFirst(ClaimTypes.Name)?.Value}" : "Welcome to H.O.S.T.E.E";
        StateHasChanged();
    }

    private void RegRedirect()
    {
        NavigationManager.NavigateTo("/register", forceLoad: true);
    }

    private void SignInRedirect()
    {
        NavigationManager.NavigateTo("/signin", forceLoad: true);
    }

    private void RefreshState()
    {
        StateHasChanged();
    }


}
