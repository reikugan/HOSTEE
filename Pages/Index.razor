@using System.Security.Claims;
@using HOSTEE.Models;
@page "/"
@inject AuthenticationStateProvider authSP
@inject NavigationManager NavigationManager



<PageTitle>HOST</PageTitle>


<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h3>Welcome, @context.User.Identity.Name!</h3>
            <p>IsAuthenticated? @context.User.Identity.IsAuthenticated</p>
        </Authorized>
        <NotAuthorized>
            <p>Please sign in</p>
            <SignIn OnSignIn="RefreshState" />
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<!--
@if (authenticated)
{
    <h3>@t</h3>
    <p>Authenticated: @authenticated</p>
}
else
{
    <h3>Authenticated: @authenticated</h3>
    <p>Please sign in</p>
    <SignIn />
}
-->


@code{
    private bool authenticated = false;
    private string t = "Welcome to H.O.S.T.E.E";

    private bool test = false;

    protected override async Task OnInitializedAsync()
    {
            var authState = await authSP.GetAuthenticationStateAsync();
            var user = authState.User;
            authenticated = user.Identity.IsAuthenticated;

            Console.WriteLine($"From Index/OnInitialized: {authenticated}, out user is {user.Identity.Name}");
            t = authenticated ? $"Welcome to H.O.S.T.E.E, {user.FindFirst(ClaimTypes.Name)?.Value}" : "Welcome to H.O.S.T.E.E";
            StateHasChanged();
    }

    private void RegRedirect()
    {
        NavigationManager.NavigateTo("/register", forceLoad: true);
    }

    private void RefreshState()
    {
        StateHasChanged();
    }


}
