@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@using HOSTEE.Models;
@using Microsoft.AspNetCore.WebUtilities
@page "/"
@inject AuthenticationStateProvider authSP
@inject NavigationManager NavigationManager



<PageTitle>HOST</PageTitle>


<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h1>Welcome, @usersName</h1>
            <p>Your ID: @usersId</p>
            <p>Email: @email</p>
        </Authorized>
        <NotAuthorized>
            <p>Please sign in</p>
            <button @onclick=SignInRedirect>Sign In</button>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>



@code{
    private bool authenticated = false;
    private string t = "Welcome to H.O.S.T.E.E";

    private string usersName = "noname";
    private string usersId = "no id";
    private string email = "no email";

    private bool test = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("forceRefresh", out var _))
        {
            NavigationManager.NavigateTo("/", forceLoad: false);
        }

        var authState = await authSP.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity?.IsAuthenticated == true)
        {
            Console.WriteLine("Index: User authenticated!");
            email = user.Identity?.Name ?? "Email not found";
            usersName = user.FindFirst("Name")?.Value ?? "No Name :(";
            usersId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Id not found";
        }
        else 
        {
            Console.WriteLine("Index: User is not Authenticated");
        }
        StateHasChanged();
    }

    private void RegRedirect()
    {
        NavigationManager.NavigateTo("/register", forceLoad: true);
    }

    private void SignInRedirect()
    {
        NavigationManager.NavigateTo("/signin", forceLoad: true);
    }

    private void RefreshState()
    {
        StateHasChanged();
    }


}
