@using HOSTEE.Services
@page "/notes"
@inject INotesService NotesService
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Your Notes</h3>
<div class="note-container">
    <div class="row">
        <p style="color: white">Title:*</p>
        <InputText @bind-Value="notetitle"></InputText>
    </div>
    <div class="row">
        <p style="color: white">Content:*</p>
    </div>
    <div class="row">
        <InputText @bind-Value="notecontent"></InputText>
    </div>
</div>


<SfButton @onclick="CreateNote">New note</SfButton>

<ul>
    @foreach (var note in notes)
    {
        <li>
            <h5>@note.Title</h5>
            <p>@note.Content</p>
            <button @onclick="() => DeleteNote(note.Id)">Delete</button>
        </li>
    }
</ul>

@code {
    private List<Note> notes = new();
    private string notetitle { get; set; }
    private string notecontent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var logstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = logstate.User;
        if (user.Identity.IsAuthenticated)
        {
            notes = await NotesService.GetNotesAsync(user.Identity.Name);
        }
    }

    private async Task CreateNote()
    {
        if (string.IsNullOrEmpty(notetitle) || string.IsNullOrEmpty(notecontent)){ 
            return;
        }

        var logstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = logstate.User.Identity.Name;

        await NotesService.AddNoteAsync(new Note { Title = notetitle, Content = notecontent, UserId = userId });
        notes = await NotesService.GetNotesAsync(userId);
    }

    private async Task DeleteNote(int id)
    {
        await NotesService.DeleteNoteAsync(id);
        notes = await NotesService.GetNotesAsync(await GetUserId());

    }

    private async Task<string> GetUserId()
    {
        var logstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return logstate.User.Identity.Name;
    }


}
