@using System.Security.Claims;
@using HOSTEE.Services;
@inject NavigationManager navigator
@inject AuthenticationStateProvider authSP
@page "/workout"

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h3>Workout</h3>
            <p>@userName</p>
            <div class="workout-table">
                <div style="width: 100%; height: 60px; display: flex; justify-content: center">
                    <div class="col">
                        <button class="workout-panel-button">New Training</button>
                    </div>
                    <div class="col">
                        <button class="workout-panel-button">Manage Exercises</button>
                    </div>
                    <div class="col">
                        <button class="workout-panel-button">Your training programs</button>
                    </div>
                    <div class="col">
                        <button class="workout-panel-button">History and progression</button>
                    </div>
                </div>

                <div style="width: 100%">
                    @foreach (var fragment in fragments)
                    {
                        <div>
                            @fragment
                        </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <p>Please sign in</p>
            <button @onclick=SignInRedirect>Sign In</button>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


@code {
    public string userName = "no name";
    public int userID;

    public List<Exercise> exercises;
    public List<RenderFragment> fragments;


    protected override async Task OnInitializedAsync()
    {
        var authState = await authSP.GetAuthenticationStateAsync();
        var user = authState.User;


        if(user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name;
            userID = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            exercises = await WorkoutServices.GetUserExercisesAsync(userID);
        }
    }

    public void CreateExercise()
    {
        RenderFragment f = builder =>
        {
            builder.OpenComponent<NewExercise>(0);
            builder.CloseComponent();
        };
        fragments.Add(f);
    }

    public void SignInRedirect()
    {
        navigator.NavigateTo("/singin", forceLoad: true);
    }
}
