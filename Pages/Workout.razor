@using System.Security.Claims;
@using HOSTEE.Services;
@using HOSTEE.Shared.Workout;
@inject NavigationManager navigator
@inject AuthenticationStateProvider authSP
@inject WorkoutServices workoutService
@page "/workout"

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h3>Workout for, @userName</h3>
            <div class="workout-table">
                <div style="width: 100%; height: 60px; display: flex; justify-content: center">
                    <div class="col">
                        <button class="workout-panel-button" @onclick="() => currentPanel = PanelType.NewTraining">New Training</button>
                    </div>
                    <div class="col">
                        <button class="workout-panel-button" @onclick="() => currentPanel = PanelType.ManageExercises">Manage Exercises</button>
                    </div>
                    <div class="col">
                        <button class="workout-panel-button" @onclick="() => currentPanel = PanelType.ManagePrograms">Your training programs</button>
                    </div>
                    <div class="col">
                        <button class="workout-panel-button" @onclick="() => currentPanel = PanelType.History">History and progression</button>
                    </div>
                </div>

                <div style="width: 100%; height: 100%; justify-content: center;">
                   @switch (currentPanel)
                    {
                        case PanelType.ManageExercises:
                            <ManageExercises userId="@userID" />
                            break;
                        case PanelType.ManagePrograms:
                            <ManagePrograms userId="@userID" />
                            break;
                        default:
                            <div>Select an option above to begin</div>
                            break;
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <p>Please sign in</p>
            <button @onclick=SignInRedirect>Sign In</button>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


@code {
    public string userName = "no name";
    public string userID;

    public enum PanelType
    {
        None,
        NewTraining,
        ManageExercises,
        ManagePrograms,
        History
    }
    
    private PanelType currentPanel = PanelType.None;

    public List<Exercise> exercises = new();
    public List<RenderFragment> fragments = new();


    protected override async Task OnInitializedAsync()
    {
        var authState = await authSP.GetAuthenticationStateAsync();
        var user = authState.User;


        if(user.Identity?.IsAuthenticated == true)
        {
            userName = user.FindFirst("Name")?.Value ?? "Unknown";
            userID = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            exercises = (await workoutService.GetUserExercisesAsync(userID)).ToList();
        }
    }

        /*
        public void CreateExercise()
        {
            RenderFragment f = builder =>
            {
            builder.OpenComponent<NewExercise>(0);
            builder.AddAttribute(1, "UserId", userID);
            builder.AddAttribute(2, "OnExCreated", EventCallback.Factory.Create<Exercise>(this, OnExerciseCreated));
        builder.CloseComponent();
        };
        //creatingEx = true;
        fragments.Add(f);
        StateHasChanged();
    }
    */

    public void SignInRedirect()
    {
        navigator.NavigateTo("/singin", forceLoad: true);
    }
}
