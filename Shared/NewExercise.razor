@using HOSTEE.Models

<div class="new-ex-panel">
    <EditForm Model="@exercise" OnValidSubmit="SubmitExercise">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <h3>@(editing ? "Edit Exercise" : "NewExercise") </h3>
        </div>
        <div class="row" style="justify-content: left">
            <label for="Name">Name:</label>
        </div>
        <div class="row">
            <InputText id="Name" class="form-control" @bind-Value="exercise.Name"></InputText>
        </div>
        <div class="row">
            <label for="Description">Description:</label>
        </div>
        <div class="row">
            <InputText id="Description" class="form-control" @bind-Value="exercise.Description"></InputText>
        </div>
        <div class="row">
            <label for="Type">Type:</label>
        </div>
        <div class="row">
            <InputText id="Type" class="form-control" @bind-Value="exercise.Type"></InputText>
        </div>
        <div class="row">
            <label for="MuscleGroup">Muscle Group:</label>
        </div>
        <div class="row">
            <InputText id="MuscleGroup" class="form-control" @bind-Value="exercise.MuscleGroup"></InputText>
        </div>

        <div class="row" style="padding: 10px 0px">
            <div class="col">
                <button class="btn btn-primary" style="width:100%; background-color: forestgreen" type="submit">@(editing ? "Save" : "Add")</button>
            </div>
            <div class="col">
                <button type="button" class="btn btn-primary" style="width:100%" @onclick="Reset">Clear</button>
            </div>
        </div>
        <div class="row">
            <button class="btn btn-primary" style="padding-top: 10px; width: 100%" type="button" @onclick="CancelCreation">Cancel</button>
        </div>

    </EditForm>
</div>

@code {
    [Parameter] public string UserId { get; set; }
    [Parameter] public EventCallback<Exercise> OnExSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Exercise? EditingExercise { get; set; }

    public Exercise exercise = new();
    public bool editing = false;

    protected override void OnParametersSet()
    {

        if (EditingExercise != null)
        {
            exercise = new Exercise
                {
                    Id = EditingExercise.Id,
                    Name = EditingExercise.Name,
                    Type = EditingExercise.Type,
                    MuscleGroup = EditingExercise.MuscleGroup,
                    Description = EditingExercise.Description,
                    UserId = EditingExercise.UserId
                };
            editing = true;
        }
        else
        {
            exercise.UserId = UserId;
            editing = false;
        }
    }

    public async Task SubmitExercise()
    {
        exercise.UserId = UserId;
        await OnExSaved.InvokeAsync(exercise);
    }

    public void Reset()
    {
        exercise = new Exercise { UserId = UserId };
        editing = false;
    }

    public async void CancelCreation()
    {
        await OnCancel.InvokeAsync();
    }
}
