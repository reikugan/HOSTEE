@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@inject SignInManager<ApplicationUser> sinManager
@inject NavigationManager navigator
@inject CustomAuthStateProvider CustomAuthSP
@inject HttpClient http
@inject IHttpClientFactory HttpClientFactory


<div style="width: 100%; display: flex; justify-content: center">

    <div class="box-container" style="width: 320px">
        <EditForm Model="@signIn" OnValidSubmit="SignUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div style="display: flex; justify-content: center">
                <h3>Sign In</h3>
            </div>

            <div class="c-row">
                <div class="col" style="display: flex; align-items: center; justify-content: flex-start; max-width: 200px;">
                    <label for="Email">Email:</label>
                </div>
                <div class="col">
                    <InputText id="Email" @bind-Value="signIn.Email" />
                </div>
            </div>

            <div class="c-row">
                <div class="col" style="display: flex; align-items: center; justify-content: flex-start; max-width: 200px;">
                    <label for="Password">Password:</label>
                </div>
                <div class="col">
                    <InputText id="Password" @bind-Value="signIn.Password" type="password" />
                </div>
            </div>

            <div class="c-row">
                <button class="btn btn-primary" style="width:50%" type="submit">Sign In</button>
                <button class="btn btn-primary" style="width:50%" @onclick=RegDirect>Register</button>
            </div>  
        </EditForm>
    </div>
    <div>
        <p>?</p>
    </div>
</div>

@code {
    private SignInModel signIn = new SignInModel();
    private string mes = string.Empty;

    [Parameter] public EventCallback OnSignIn { get; set; }

    private async Task SignUser()
    {
        var client = HttpClientFactory.CreateClient("ServerAPI");
        var resp = await client.PostAsJsonAsync("api/auth/login", signIn);

        if(resp.IsSuccessStatusCode)
        {
            Console.WriteLine("User logged in successfully");
            await Task.Delay(200);
            navigator.NavigateTo("/", forceLoad: true);
        } 
        else 
        {
            Console.WriteLine("LoginFailed");
        }
    }

    private void RegDirect() 
    {
        navigator.NavigateTo("/register", forceLoad: true);
    }

}
