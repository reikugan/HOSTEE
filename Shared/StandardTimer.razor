

<div class="timer-container" style="width: 300px; height: 150px; display: flex; flex-direction: column; justify-content: center;">
    <div class="row" style="height: 25%;">
        <div class="col" style="padding: 0px; margin: 0px;">
            <p style="float: left; font-size: 12px; color: white">Standard Timer</p>
        </div>
    </div>
    <div class="row">
        <p class="p-time">@time</p>
    </div>
    <div class="row" style="width: 100%; margin: 2px; display: flex; justify-content: center; gap: 1px;">
        <div class="col" style="padding: 0;">
            <SfButton style="width: 100%; height: 100%; background-color: #0dc645" Disabled="@timerOn" @ref="btnStart" OnClick="StartTimer">Start</SfButton>
        </div>
        <div class="col" style="padding: 0;">
            <SfButton style="width: 100%; height: 100%; background-color: #5b5a5a" Disabled="!timerOn" @ref="btnStop" OnClick="StopTimer">Stop</SfButton>
        </div>
        <div class="col" style="padding: 0;">
            <SfButton style="width: 100%; height: 100%; background-color: #5b5a5a" @ref="btnReset" OnClick="ResetTimer">Reset</SfButton>
        </div>
    </div>
    <div class="row" style="height: 20%; display: flex; justify-content: center;">
        <SfButton style="width: 90%; background-color: #691515; font-size: 12px;" OnClick="DeleteTimer">Delete</SfButton>
    </div>
</div>



@code {

    [Parameter] public Guid TimerId { get; set; }
    [Parameter] public EventCallback<Guid> OnDelete { get; set; }
    SfButton btnStart;
    SfButton btnStop;
    SfButton btnReset;
    private string time = "00:00:00";
    private System.Timers.Timer? timer;
    private bool timerOn { get; set; } = false;
    private double secspassed = 0;


    private async Task StartTimer()
    {
        if (timerOn) return;

        timerOn = true;
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += TimerElapsed;
        timer.Start();
        InvokeAsync(StateHasChanged);
    }

    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        secspassed++;
        time = TimeSpan.FromSeconds(secspassed).ToString(@"hh\:mm\:ss");
        InvokeAsync(StateHasChanged);
    }

    private void StopTimer()
    {
        if (timer == null) return;
        timer.Stop();
        timerOn = false;
        StateHasChanged();
    }

    private void ResetTimer()
    {
        if (timerOn == true) return;

        StopTimer();
        time = "00:00:00";
        secspassed = 0;
        StateHasChanged();
    }

    private async Task DeleteTimer()
    {
        await OnDelete.InvokeAsync(TimerId);
    }

        public void Dispose()
        {
            timer?.Dispose();
        }

}
