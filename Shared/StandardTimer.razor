<h3>Standard Timer</h3>

<div class="timer-container" style="width: 300px; height: 120px; display: flex; flex-direction: column; justify-content: center;">
    <p class="p-time">@time</p>
    <div class="row" style="margin:5px; display: flex; justify-content: center; gap: 25px;">
        <div class="col" style="padding: 0;">
            <SfButton CSSClass="btn-timers" Disabled ="@timerOn" @ref="btnStart" OnClick="StartTimer">Start</SfButton>
        </div>
        <div class="col" style="padding: 0;">
            <SfButton CSSClass="btn-timers" Disabled="!timerOn" @ref="btnStop" OnClick="StopTimer">Stop</SfButton>
        </div>
        <div class="col" style="padding: 0;">
            <SfButton CSSClass="btn-timers" @ref="btnReset" OnClick="ResetTimer">Reset</SfButton>
        </div>
    </div>
</div>

@code {
    SfButton btnStart;
    SfButton btnStop;
    SfButton btnReset;
    private string time = "00:00:00";
    private System.Timers.Timer? timer;
    private bool timerOn { get; set; } = false;
    private double secspassed = 0;


    private async Task StartTimer()
    {
        if (timerOn) return;

        timerOn = true;
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += TimerElapsed;
        timer.Start();
        InvokeAsync(StateHasChanged);
    }

    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        secspassed++;
        time = TimeSpan.FromSeconds(secspassed).ToString(@"hh\:mm\:ss");
        InvokeAsync(StateHasChanged);
    }

    private void StopTimer()
    {
        if (timer == null) return;
        timer.Stop();
        timerOn = false;
        StateHasChanged();
    }

    private void ResetTimer()
    {
        if (timerOn == true) return;

            StopTimer();
            time = "00:00:00";
            secspassed = 0;
            StateHasChanged();
    }

        public void Dispose()
        {
            timer?.Dispose();
        }

}
