@using HOSTEE.Services
@using System.Security.Claims
@inject AuthenticationStateProvider asp
@inject WorkoutServices workoutService

<div style="display:flex; flex-direction: column; width: 100%; height: 100vh">

    <div style="display: flex; flex: 1; width: 100%">

        <div style="@(!exCreating ? "width: 100%;" : "width: 70%;"); background-color: lightblue; transition: width 0,3s; transition-timing-function: ease;">
        @foreach(Exercise ex in exercises)
        {
            <div style="display: block; text-align: left; gap: 5px; width: 300px; height: fit-content; margin: 10px; background-color: lightslategray; border: 3px solid green">
                <p style="color: white">Name: @ex.Name</p>
                <p style="color: white">Type: @ex.Type</p>
                <p style="color: white">Muscle Group: @ex.MuscleGroup</p>
                <p style="color: white; font-weight: bold;">Description: </p>
                <p style="color: white">@ex.Description</p>
                <button class="btn btn-primary" style="width: 100%; color: white; background-color: darkred" @onclick="() => RemoveExercise(ex)">Remove</button>
            </div>
        }
    </div>

    @if(exCreating)
    {
        <div style="background-color: lightcoral; width:fit-content">
            <NewExercise></NewExercise>
        </div>
    }
    <div style="width: 100%; height: 100px; position: absolute; bottom: 0; left: 0; display: flex; align-items: center; justify-content: center;">
        <button class="btn btn-primary" @onclick="CreateExercise">Add Exercise</button>
    </div>
    </div>
</div>


@code {
    public string userId = string.Empty;
    public bool exCreating = false;
    public List<Exercise> exercises = new();


    protected override async Task OnInitializedAsync()
    {
        var authState = await asp.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            exercises = (await workoutService.GetUserExercisesAsync(userId)).ToList();
        }

    }

    public void CreateExercise()
    {
        exCreating = true;
    }

    public async Task RemoveExercise(Exercise ex)
    {
        await workoutService.DeleteExerciseAsync(ex.Id, ex.UserId);
        exercises.Remove(ex);
        StateHasChanged();
    }
}
