@using HOSTEE.Services
@using System.Security.Claims
@inject AuthenticationStateProvider asp
@inject WorkoutServices workoutService

<div style="width: 100%; height: 50px; left: 0; display: flex; align-items: center; justify-content: center;">
    <button class="btn btn-primary" @onclick="CreateExercise">Add Exercise</button>
</div>

<div style="display:flex; flex-direction: column; width: 100%; height: 100%; overflow: auto">

    <div style="display: flex; flex: 1; width: 100%">
      
        <div style="@(!exCreating ? "width: 100%;" : "width: 70%;"); display: flex; flex-wrap: wrap; background-color: #393939; transition: width 0,3s; transition-timing-function: ease;">
            @foreach(Exercise ex in exercises)
            {
                <div style="display: block; text-align: left; gap: 5px; width: 300px; height: fit-content; margin: 10px; padding: 5px; background-color: #393939; border: 2px solid cyan; border-radius: 10px">
                    <p style="color: white">Name: @ex.Name</p>
                    <p style="color: white">Type: @ex.Type</p>
                    <p style="color: white">Muscle Group: @ex.MuscleGroup</p>
                    <p style="color: white; font-weight: bold">Description: </p>
                    <p style="color: white">@ex.Description</p>
                    <button class="btn btn-primary" style="width: 100%; color: white; background-color: cornflowerblue" @onclick="() => EditExercise(ex)">Edit</button>
                    <button class="btn btn-primary" style="width: 100%; color: white; background-color: darkred" @onclick="() => RemoveExercise(ex)">Remove</button>
                </div>
            }
        </div>

        @if(exCreating)
        {
            <div style="display: flex; justify-content:center; align-content: center; background-color: #393939; width:30%">
                <NewExercise UserId="@userId" EditingExercise="@editingExercise" OnExSaved="EventCallback.Factory.Create<Exercise>(this, OnExerciseSaved)" OnCancel="EventCallback.Factory.Create(this, OnExCanceled)" />
            </div>
        }      
    </div>
</div>


@code {
    [Parameter] public string userId { get; set; }
    public bool exCreating = false;
    public List<Exercise> exercises = new();
    public Exercise? editingExercise;


    protected override async Task OnInitializedAsync()
    {
        var authState = await asp.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            exercises = (await workoutService.GetUserExercisesAsync(userId)).ToList();
        }

    }

    public void CreateExercise()
    {
        editingExercise = null;
        exCreating = true;
    }

    public void EditExercise(Exercise ex)
    {
        editingExercise = ex;
        exCreating = true;
    }

    public async Task OnExerciseSaved(Exercise ex)
    {
        if (string.IsNullOrEmpty(ex.UserId))
        {
            Console.WriteLine($"Error: userId is {ex.UserId}");
            return;
        }

        if (ex.Id == 0)
        {   
            await workoutService.CreateExerciseAsync(ex);
            exercises.Add(ex);
        }
        else
        {
            await workoutService.UpdateExerciseAsync(ex);
            var index = exercises.FindIndex(e => e.Id == ex.Id);
            if (index >= 0)
            {
                exercises[index] = ex;
            }
        }

        exCreating = false;
        StateHasChanged();
    }

    public void OnExCanceled()
    {
        exCreating = false;
    }

    public async Task RemoveExercise(Exercise ex)
    {
        await workoutService.DeleteExerciseAsync(ex.Id, ex.UserId);
        exercises.Remove(ex);
        StateHasChanged();
    }
}
